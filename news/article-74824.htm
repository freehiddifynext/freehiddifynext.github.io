<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freehiddifynext.github.io/news/article-74824.htm" />
    <title>node.js &#8211; 路由、中间件、mysql</title>
        <meta name="description" content="这几天天天搞到这么晚，我看今天的内容看起不多啊，不知道为什么学着学着就到了这么晚。今天的内容还是有点多哈，有点自我矛盾了，再次一一道来。 1. 首先今天先看到路由的概念，什么叫做路由？ 路由就是映射关" />
        <link rel="icon" href="/assets/website/img/freehiddifynext/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="FreeHiddifyNext节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freehiddifynext.github.io/news/article-74824.htm" />
    <meta property="og:site_name" content="FreeHiddifyNext节点订阅站" />
    <meta property="og:title" content="node.js &#8211; 路由、中间件、mysql" />
    <meta property="og:image" content="https://freehiddifynext.github.io/uploads/20240414/49991883b1523a3bd855f07ad657519f.webp" />
        <meta property="og:release_date" content="2025-03-16T10:28:03" />
    <meta property="og:updated_time" content="2025-03-16T10:28:03" />
        <meta property="og:description" content="这几天天天搞到这么晚，我看今天的内容看起不多啊，不知道为什么学着学着就到了这么晚。今天的内容还是有点多哈，有点自我矛盾了，再次一一道来。 1. 首先今天先看到路由的概念，什么叫做路由？ 路由就是映射关" />
        
    <!--meta tags -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
        addEventListener("load", function () {
        setTimeout(hideURLbar, 0);
      }, false);
      
      function hideURLbar() {
        window.scrollTo(0, 1);
      }
    </script>
    <!--//meta tags ends here-->

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="node.js &#8211; 路由、中间件、mysql">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!--booststrap-->
    <link href="/assets/website/css/freehiddifynext/bootstrap.min.css" rel="stylesheet" type="text/css" media="all">
    <!--//booststrap end-->
    <!-- font-awesome icons -->
    <link href="/assets/website/css/freehiddifynext/font-awesome.min.css" rel="stylesheet">
    <!-- //font-awesome icons -->
    <!--stylesheets-->
    <link href="/assets/website/css/freehiddifynext/style.css" rel='stylesheet' type='text/css' media="all">
    <!--//stylesheets-->
    <link href="http://fonts.googleapis.com/css?family=Thasadith:400,700" rel="stylesheet">
    <link href="http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-N7EH3QDE4Q"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-N7EH3QDE4Q');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--headder-->
    <div class="header-outs inner_page-banner " id="home">
                <div class="headder-top">
            <!-- nav -->
            <nav>
                <div id="logo">
                    <a href="/">
                                        <span>Free Hiddify Next</span>
                                        </a>
                </div>
                <label for="drop" class="toggle">Menu</label>
                <input type="checkbox" id="drop">
                <ul class="menu mt-2">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
            </nav>
            <!-- //nav -->
        </div>
    </div>
    <!--//headder-->
    <!-- short -->
    <div class="using-border py-3">
        <div class="inner_breadcrumb  ml-4">
            <ul class="short_ls">
                <li>
                    <a href="/">首页</a>
                    <span>/</span>
                </li>
                <li>
                    <a href="/news/">新闻资讯</a>
                    <span>/</span>
                </li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //short-->
    <!-- about -->
    <section class="about py-lg-4 py-md-3 py-sm-3 py-3" id="about">
        <div class="container py-lg-5 py-md-4 py-sm-4 py-3">
            <div class="row">
                <div class="col-md-9">
                  <h1 class="title text-center mb-lg-5 mb-md-4 mb-sm-4 mb-3">node.js &#8211; 路由、中间件、mysql</h1>
                                  <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>这几天天天搞到这么晚，我看今天的内容看起不多啊，不知道为什么学着学着就到了这么晚。今天的内容还是有点多哈，有点自我矛盾了，再次一一道来。</p> <p>1.</p> <p>首先今天先看到路由的概念，什么叫做路由？</p> <p>路由就是映射关系，在express中路由指的是客户端请求和服务器处理函数的映射关系，路由有三部分组成：请求类型、请求url和处理函数。</p> <p>app.get(url，callback)其实就跟我们前面所说的监听事件一样一一样的。</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express() app.get(</span>'/', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send(</span>'收到get请求'<span style="color: rgba(0, 0, 0, 1)">) }) app.listen(</span>80, () =&gt; console.log('express server running at http://127.0.0.1'))</pre> </div> <p>这就是一个最简单的路由。路由的匹配过程，每当一个请求到达服务器器后，需要先经过路由匹配，当请求类型和url匹配成功后才会调用后面的请求函数。、</p> <p>用法</p> <p>最简单的用法就是像我们上面那样直接挂在实例上，这也是不推荐的，因为一个请求就要挂一个很麻烦很繁琐。</p> <p>科学的方法应该是创建路由模块。</p> <p>分为五个步骤：</p> <p>分别是创建路由js文件、调用express.Router创建路由对象、挂载路由、向外导出路有对象最后我们的入口文件需要导入，在通过app.use去注册</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1.导入express</span> const express = require('express'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.创建路由对象</span> const router =<span style="color: rgba(0, 0, 0, 1)"> express.Router()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.挂载路由</span><span style="color: rgba(0, 128, 0, 1)"> //</span><span style="color: rgba(0, 128, 0, 1)"> 3.1挂载路由获取用户的信息</span> router.get('/user/:id', (req,  res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send(req.params) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.2挂载路由接受用户发送的请求</span> router.post('/post', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send(</span>'post成功'<span style="color: rgba(0, 0, 0, 1)">) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.向外共享路由成员</span> module.exports =<span style="color: rgba(0, 0, 0, 1)"> {     express,     router  }</span></pre> </div> <div class="cnblogs_code"> <pre>const express = require('./02模块化路由'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express.express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">  注册路由</span><span style="color: rgba(0, 0, 0, 1)">app.use(express.router) app.listen(</span>80, () =&gt; console.log('express server running at http://127.0.0.1'))</pre> </div> <p>这里说一下app.use昨天也看到了，他其实就是一个用来注册全局中间件的。然后我们还可以为路由挂载前缀，也是通过app.use来添加方法同昨天基本一样</p> <p>2.</p> <p>中间件</p> <p>指的是业务流程的中间处理环节。</p> <p>就是当客户请求到达服务器后，可连续调用多个中间件对这个请求进行预处理，最后通过路由发送出来。</p> <p>中间件的本质是一个函数根路有类似但是多了一个参数，next参数。</p> <p>next是一个函数它的作用就是实现多个中间件连续调用的关键，把流转关系转给下一个中间件或者路由，每个中间件都有一个next一个转下去转到路由没有了就响应给客户端了。</p> <p>2.1</p> <p>我们先看到全局生效的中间件，意思就是客户发起的任何请求，他都会触发，直接通过app.use来注册即可</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 中间件</span> const mw =<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">(req, res, next) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> res.send('这是中间件环节')</span>     console.log('这是中渐渐环节'<span style="color: rgba(0, 0, 0, 1)">)     next() }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 通过app。use定义为全局生效的中间件</span><span style="color: rgba(0, 0, 0, 1)">app.use(mw)  app.get(</span>'/user', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send(</span>'这是get请求'<span style="color: rgba(0, 0, 0, 1)">) })  app.post(</span>'/post', (res, req) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send(</span>'这是一个post请求'<span style="color: rgba(0, 0, 0, 1)">) }) app.listen(</span>80, () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(</span>'http://127.0.0.1'<span style="color: rgba(0, 0, 0, 1)">); })</span></pre> </div> <p>中间件的作用：</p> <p>多个中间件共享同一个res和req，所以可以在上游的中间件定义好这些对象，下游直接用包括路由也可以用</p> <p>怎么来定义多个全局中间件，直接通过app.use定义多个即可就像昨天所说的托管静态资源，有多个目录就注册多个</p> <p>2.2</p> <p>局部中间件</p> <p>不是用app.use只对部分的路由有效，路由 的参数规则 也发生了改变</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express()  const mw</span>=<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">(req, res, next) {     req.time</span>=<span style="color: rgba(0, 0, 0, 1)"> Date.now()     next() }  app.get(</span>'/', mw, (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send(</span>'局部生效' +<span style="color: rgba(0, 0, 0, 1)"> req.time) }) app.get(</span>'/user', (req, res) =&gt; res.send('没有生效') +<span style="color: rgba(0, 0, 0, 1)"> req.time) app.listen(</span>80, ()=&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(</span>'http://127.0.0.1'<span style="color: rgba(0, 0, 0, 1)">); })</span></pre> </div> <p>定义多个局部中间件</p> <p>写多个函数过后在参数这里可以用逗号隔开，也可以直接写一个数组</p> <p>有一个注意事项：就是一定要在路由之前去注册中间件，不然路由执行完了谁还来执行中间件。</p> <p>2.3</p> <p>中间件的分类</p> <p>①应用级别中间件</p> <p>就是通过get、post、use绑定到app上的中间件</p> <p>②路由级别中间件</p> <p>就是在我们刚才的路由模块里面来穿插的一个中间件</p> <p>③错误级别中间件</p> <p>这个有点说法</p> <p>它是专门用来捕获错误信息的而且形参变为了四个</p> <p>他也是唯一一个卸载路由后面的中间件</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const { rename }</span>= require('fs'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express() app.get(</span>'/', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1.人为抛出一个错误，一旦有错后面的响应就不会执行了</span><span style="color: rgba(0, 0, 255, 1)">throw</span><span style="color: rgba(0, 0, 255, 1)">new</span> Error('服务器内部发生错误'<span style="color: rgba(0, 0, 0, 1)">)     res.send(</span>'我不能执行出来'<span style="color: rgba(0, 0, 0, 1)">) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.错误中间件</span> app.use((err,req,res,next) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.1向服务器打印错误</span><span style="color: rgba(0, 0, 0, 1)">    console.log(err.message);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.2向客户端发送错误</span><span style="color: rgba(0, 0, 0, 1)">    res.send(err.message)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 这样做 好处就是，前面如果发生了错误导致了整个服务器已经崩溃了，什么都执行不了了，这样一来，就可以正常输出错误信息，正常执行后面代码</span><span style="color: rgba(0, 0, 0, 1)">}) app.listen(</span>80, () =&gt; console.log('express server running at http://127.0.0.1'))</pre> </div> <p>④内置中间件</p> <p>三个内置的中间件分别是express.static这个已经说过了前面</p> <p>express.json这是拿来解析json格式数据的</p> <p>express.urlencoded这是拿来解析urlencoded格式数据的</p> <p>后面两个一般会配合req.body来拿请求体数据再给他们拿来解析了</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 注意这是中间件 所以必须配置到路由之前</span><span style="color: rgba(0, 0, 0, 1)">app.use(express.json()) app.use(express.urlencoded({extended :</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">})) app.post(</span>'/', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 通过req.body可以拿到请求体数据</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> postman在测试的时候选择body里面的raw再把text选择json就可以发送json数据了</span><span style="color: rgba(0, 0, 0, 1)">    console.log(req.body);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 没有解析之前对于json数据是undefined</span><span style="color: rgba(0, 0, 0, 1)">})</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 测试urlencoded数据体</span><span style="color: rgba(0, 128, 0, 1)"> //</span><span style="color: rgba(0, 128, 0, 1)"> 这个数据体的格式是x-www-form-urlencoded</span><span style="color: rgba(0, 128, 0, 1)"> //</span><span style="color: rgba(0, 128, 0, 1)"> 固定写法</span> app.post('/user', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 没解析前时空对象</span><span style="color: rgba(0, 0, 0, 1)">    console.log(req.body); }) app.listen(</span>80, () =&gt; console.log('express server running at http://127.0.0.1'))</pre> </div> <p>⑤第三方中间件 直接npm安装导入通过app.use注册即可使用</p> <p>2.4</p> <p>自定义中间件</p> <p>这里做一个案例自定义一个类似于express.urlencoded功能的中间件可以解析请求体数据</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.利用node里面的一个内置模块解析请求体数据，在node里面内置了一个querystring模块是专门用来处理查询字符串的，这个模块提供的</span><span style="color: rgba(0, 128, 0, 1)"> //</span><span style="color: rgba(0, 128, 0, 1)"> parse（）函数可以把查询字符串转换为对象</span> const qs = require('querystring'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1.定义中间件</span> app.use((req, res, next) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.监听data事件，因为既然是服务器，那么肯定会接收到癞子客户端的请求，如果有时候请求量过大，就会分批次传给服务器数据，所以data事件可能触发多次</span><span style="color: rgba(0, 128, 0, 1)"> //</span><span style="color: rgba(0, 128, 0, 1)"> 就需要把每一次的数据最后拼接起来</span> let str = ''<span style="color: rgba(0, 0, 0, 1)"> req.on(</span>'data', chunk =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     str</span>+=<span style="color: rgba(0, 0, 0, 1)"> chunk })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.req的end事件当请求体接收完毕会自动出发end事件可以在这里处理完整的请求体数据</span> req.on('end', () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(str);     str</span>=<span style="color: rgba(0, 0, 0, 1)"> qs.parse(str)     console.log(str);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 5.讲解洗出来的对象给到req.body</span>     req.body =<span style="color: rgba(0, 0, 0, 1)"> str     next() }) })     app.post(</span>'/', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send(req.body) }) app.listen(</span>80, () =&gt; console.log('http://127.0.0.1'))</pre> </div> <p>然后将自定义中间件进行了一个模块化</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.利用node里面的一个内置模块解析请求体数据，在node里面内置了一个querystring模块是专门用来处理查询字符串的，这个模块提供的</span><span style="color: rgba(0, 128, 0, 1)"> //</span><span style="color: rgba(0, 128, 0, 1)"> parse（）函数可以把查询字符串转换为对象</span> const qs = require('querystring'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 因为别人导入进来是直接注册使用所以可以把app开服务器等一些多余的代码省略就保存app.use里面的</span> const bodyParse = (req, res, next) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.监听data事件，因为既然是服务器，那么肯定会接收到癞子客户端的请求，如果有时候请求量过大，就会分批次传给服务器数据，所以data事件可能触发多次</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 就需要把每一次的数据最后拼接起来</span>     let str = ''<span style="color: rgba(0, 0, 0, 1)">     req.on(</span>'data', chunk =&gt;<span style="color: rgba(0, 0, 0, 1)"> {         str</span>+=<span style="color: rgba(0, 0, 0, 1)"> chunk     })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.req的end事件当请求体接收完毕会自动出发end事件可以在这里处理完整的请求体数据</span>     req.on('end', () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {         console.log(str);         str</span>=<span style="color: rgba(0, 0, 0, 1)"> qs.parse(str)         console.log(str);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 5.讲解洗出来的对象给到req.body</span>         req.body =<span style="color: rgba(0, 0, 0, 1)"> str         next()     }) }  module.exports</span>= bodyParse</pre> </div> <div class="cnblogs_code"> <pre>const bodyParse = require('./自定义中间件模块化'<span style="color: rgba(0, 0, 0, 1)">) const express</span>= require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express() app.use(bodyParse) app.post(</span>'/', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> res.send('收到get请求')</span><span style="color: rgba(0, 0, 0, 1)">    console.log(req.body); }) app.listen(</span>80, () =&gt; console.log('express server running at http://127.0.0.1'))</pre> </div> <p>3.</p> <p>我们继续看到用express来写接口</p> <p>分为了三个步骤</p> <p>创建基本服务器、创建 api路由模块、编写get接口</p> <p>这是路由模块</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.写api路由模块 就是将路由模块化 因为那边引入进来需要用use来注册同时挂载api前缀</span> const  express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const router</span>=<span style="color: rgba(0, 0, 0, 1)"> express.Router()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.编写get接口</span> router.get('/get', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.1首先拿到用户传过来的数据</span>     let data =<span style="color: rgba(0, 0, 0, 1)"> req.query</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.2把数据发送给客户端</span><span style="color: rgba(0, 0, 0, 1)">    res.send({         status :</span>0,<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 0表示成功 1表示失败</span>         msg : 'get请求成功'<span style="color: rgba(0, 0, 0, 1)">,         data : data</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">把数据返回给客户端</span><span style="color: rgba(0, 0, 0, 1)">    }) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.编写post接口</span> router.post('/post', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.1客户端发过来的数据</span>     let data =<span style="color: rgba(0, 0, 0, 1)"> req.body     res.send({         status :</span>0<span style="color: rgba(0, 0, 0, 1)">,         msg :</span>'post请求成功'<span style="color: rgba(0, 0, 0, 1)">,         data : data     }) })  module.exports</span>= router</pre> </div> <p>其实主要就是通过req的那几个属性拿到数据后，再通过send方法发给客户端，下面是入口文件主要就是开启服务器，然后解析下数据</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1.创建基本web服务器</span> const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.1导入路由模块 并挂载前缀</span> const router = require('./router'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.2注册内置中间件 不然req.body解析不出来</span> app.use(express.urlencoded({extended :<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">}))</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 5.cors解决跨域</span> const cors = require('cors'<span style="color: rgba(0, 0, 0, 1)">) app.use(cors()) app.use(</span>'/api'<span style="color: rgba(0, 0, 0, 1)">, router) app.listen(</span>80, ()=&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(</span>'http://127.0.0.1'<span style="color: rgba(0, 0, 0, 1)">); })</span></pre> </div> <p>有些东西要把后面看了才知道哈我只是先拿上来了。</p> <p>4.</p> <p>cors和jsonp</p> <p>我们刚才这个案例其实是有bug的，就是有跨域的问题，我们创建一个html文件通过button来获取数据这个时候就会因为协议不同而被同源策略组织。</p> <p>我们前面也说过解决跨域一个是cors一个是jsonp，这里肯定不能用jsonp因为他只支持get，那么怎么来用cors呢？</p> <p>直接三部曲安装导入加注册就解决了跨域问题了，就这么简单。</p> <p>4.1</p> <p>什么是cors</p> <p>就是由一系列http响应头组成，同源策略碰到这个头就会解除限制。</p> <p>cors一般是在服务器进行配置，客户端不需要。</p> <p>下面是一些了解性内容</p> <p>响应头部：</p> <p>第一个res.setHeader（‘Access-Control-Allow-Orign’，‘http：wwwssss。聪明、’）</p> <p>这是表示只允许后面这个网站的域来访问，如果为*那就表示允许任何域来访问了</p> <p>第二个是前面的基础上为Allow-Headers</p> <p>我们的cors默认值只有9个请求头如果超出了这个九个头就必然失败请求，在这个九个之外的可以通过这个代码来添加上来</p> <p>第三个前面的基础上-Methods</p> <p>cors默认只支持get post head 除此之外的需要用这个来设置。</p> <p>4.2</p> <p>现在不是了解内容了。</p> <p>cors请求分类</p> <p>大体上分为简单请求和预检请求。</p> <p>什么叫做简单请求</p> <p>满足两个条件：</p> <p>一个是请求方式在默认的三个之内，一个是http请求头不能超过默认的九个</p> <p>什么是预检请求</p> <p>三个条件达到其中一种都是</p> <p>一个是请求头在九个之外，一个是请求方式在三个之外，还有一个就是发送过来的数据是json数据</p> <p>那么他们的区别是什么呢</p> <p>很简单，简单请求只会发送一次请求，而预检请求会发送两次请求，为什么？</p> <p>因为预检请求会在服务器与客户端正是连接之前，提前发一个option的请求作为预检，看服务器能否跟这个格式的请求相连接，只有请求成功了才会开始正式请求，携带真实数据。</p> <p>5.</p> <p>今天最后一个内容jsonp接口</p> <p>首先要注意一下，如果说已经配置了cors那么必须在配置cors之前去声明jsonp接口，不然会错乱的。</p> <p>做这个接口之前我们先来回应一下jsonp的一个知识，首先它是来解决跨域的，我们通过script标签把函数传进来再去调用接口这种方式就叫jsonp</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1.创建基本web服务器</span> const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.1导入路由模块 并挂载前缀</span> const router = require('./router'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.2注册内置中间件 不然req.body解析不出来</span> app.use(express.urlencoded({extended :<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">}))</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 6.jsonp接口必须写在coes之前</span> app.get('/api/jsonp', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 6.1获取回调函数的名字</span>     let fn =<span style="color: rgba(0, 0, 0, 1)"> req.query.callback</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 6.2定义你要发送回去的数据对象</span>     let data = {name : '张三', age : 15<span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 6.3模拟函数调用</span>     let fnDiao =<span style="color: rgba(0, 0, 0, 1)"> `${fn}(${JSON.stringify(data)})`</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 6.4数据返回回去</span><span style="color: rgba(0, 0, 0, 1)">    res.send(fnDiao) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 5.cors解决跨域</span> const cors = require('cors'<span style="color: rgba(0, 0, 0, 1)">) const { json }</span>= require('body-parser'<span style="color: rgba(0, 0, 0, 1)">) app.use(cors()) app.use(</span>'/api'<span style="color: rgba(0, 0, 0, 1)">, router) app.listen(</span>80, ()=&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(</span>'http://127.0.0.1'<span style="color: rgba(0, 0, 0, 1)">); })</span></pre> </div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/07506a61181e26df4a4576dd680225ed.jpg" alt="node.js - 路由、中间件、mysql"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b45a12b3ffa3cfeedb9b3ed3578b78d0.jpg" alt="node.js - 路由、中间件、mysql"></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-74164.htm">天津宠物狗领养中心电话地址（天津宠物领养中心在哪?）</a></p>
                                        <p>下一个：<a href="/news/article-74825.htm">宠康动物医院是全国连锁吗多少钱（宠康动物诊所）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-49868.htm" title="动物疫苗接种时间要求规定 动物疫苗接种时间要求规定最新">动物疫苗接种时间要求规定 动物疫苗接种时间要求规定最新</a></li>
                        <li class="py-2"><a href="/news/article-63253.htm" title="python读取hdfs上的parquet文件以及python访问hdfs HA的三种方法">python读取hdfs上的parquet文件以及python访问hdfs HA的三种方法</a></li>
                        <li class="py-2"><a href="/news/article-42906.htm" title="在MySQL中，如何将FROM_UNIXTIME()函数与格式字符串一起使用？">在MySQL中，如何将FROM_UNIXTIME()函数与格式字符串一起使用？</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-7-free-clash-subscribe.htm" title="2月7日19.1M/S|Hiddify-Next免费机场订阅每天更新订阅链接">2月7日19.1M/S|Hiddify-Next免费机场订阅每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-46405.htm" title="广州领养宠物救助站地址电话（广州领养宠物救助站地址电话是多少）">广州领养宠物救助站地址电话（广州领养宠物救助站地址电话是多少）</a></li>
                        <li class="py-2"><a href="/news/article-37495.htm" title="猫体外驱虫药有哪些（猫体外驱虫药有哪些药）">猫体外驱虫药有哪些（猫体外驱虫药有哪些药）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-7-node-share-links.htm" title="1月7日22.2M/S|Hiddify-Next免费机场订阅每天更新订阅链接">1月7日22.2M/S|Hiddify-Next免费机场订阅每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-56857.htm" title="设置feign配置日志级别">设置feign配置日志级别</a></li>
                        <li class="py-2"><a href="/news/article-52475.htm" title="猫三联加狂犬疫苗要打多久（猫三联 狂犬疫苗）">猫三联加狂犬疫苗要打多久（猫三联 狂犬疫苗）</a></li>
                        <li class="py-2"><a href="/news/article-57412.htm" title="动物医院资质级别有哪些类型的（动物医院资质级别有哪些类型的证书）">动物医院资质级别有哪些类型的（动物医院资质级别有哪些类型的证书）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </section>
    <!-- //about -->
    
    <!-- footer -->
<footer class="py-lg-4 py-md-3 py-sm-3 py-3">
    <div class="container py-lg-5 py-md-5 py-sm-4 py-3">
        <div class="bottem-wthree-footer text-center pt-md-4 pt-3">
            <p>
                <a href="/">首页</a> |
                <a href="/free-node/">免费节点</a> |
                <a href="/news/">新闻资讯</a> |
                <a href="/about-us.htm">关于我们</a> |
                <a href="/disclaimer.htm">免责申明</a> |
                <a href="/privacy.htm">隐私申明</a> |
                <a href="/sitemap.xml">网站地图</a>
            </p>
            <p>
                <a href="/">FreeHiddifyNext节点订阅站</a> 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
        <!-- move icon -->
        <div class="text-center">
            <a href="#home" class="move-top text-center mt-3"><i class="fa fa-arrow-up" aria-hidden="true"></i></a>
        </div>
        <!--//move icon -->
    </div>
</footer>
<!--//footer -->
<script src="/assets/website/js/frontend/freehiddifynext/jquery-1.11.1.min.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
<script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>